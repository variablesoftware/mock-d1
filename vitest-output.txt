
 RUN  v3.1.4 /Users/px/Private/Code/_Internet/com-variablesoftware/mock-d1

 âœ“ tests/unit/engine.whereParser.test.ts > parseWhereClause > parses simple equality 7ms
 âœ“ tests/unit/engine.whereParser.test.ts > parseWhereClause > parses quoted column and string value 38ms
 âœ“ tests/unit/engine.whereParser.test.ts > parseWhereClause > parses bind parameter 0ms
 âœ“ tests/unit/engine.whereParser.test.ts > parseWhereClause > parses IS NULL 0ms
 âœ“ tests/unit/engine.whereParser.test.ts > parseWhereClause > parses IS NOT NULL 0ms
 âœ“ tests/unit/engine.whereParser.test.ts > parseWhereClause > parses AND/OR expressions 1ms
 âœ“ tests/unit/engine.whereParser.test.ts > parseWhereClause > parses nested parentheses 0ms
 âœ“ tests/unit/engine.whereParser.test.ts > parseWhereClause > throws on unsupported operators 15ms
 âœ“ tests/unit/engine.whereParser.test.ts > parseWhereClause > throws on malformed or incomplete clauses 8ms
 âœ“ tests/unit/engine.whereParser.test.ts > parseWhereClause > throws on too deeply nested parentheses 1ms
 âœ“ tests/unit/engine.whereParser.test.ts > parseWhereClause (randomized) > parses random equality 1ms
 âœ“ tests/unit/engine.whereParser.test.ts > parseWhereClause (randomized) > parses random bind parameter 0ms
 âœ“ tests/unit/engine.whereParser.test.ts > parseWhereClause (randomized) > parses random IS NULL/IS NOT NULL 3ms
 âœ“ tests/unit/engine.whereParser.test.ts > parseWhereClause (randomized) > parses random AND/OR 1ms
 âœ“ tests/unit/engine.whereParser.test.ts > parseWhereClause (randomized) > parses random column names and values 1ms
 âœ“ tests/unit/tableUtils.tableNameUtils.test.ts > tableNameUtils > extracts table name from various SQL statements 6ms
 âœ“ tests/unit/tableUtils.tableNameUtils.test.ts > tableNameUtils > throws on malformed SQL 2ms
 âœ“ tests/unit/tableUtils.tableNameUtils.test.ts > tableNameUtils > normalizes table names (quoted/unquoted) 2ms
 âœ“ tests/unit/tableUtils.tableNameUtils.test.ts > tableNameUtils > gets table key from db map 3ms
 âœ“ tests/unit/tableUtils.tableNameUtils.test.ts > extractTableName > extracts table name from CREATE TABLE 1ms
 âœ“ tests/unit/tableUtils.tableNameUtils.test.ts > extractTableName > extracts table name from INSERT INTO 0ms
 âœ“ tests/unit/tableUtils.tableNameUtils.test.ts > extractTableName > extracts table name from DELETE FROM 0ms
 âœ“ tests/unit/tableUtils.tableNameUtils.test.ts > extractTableName > extracts table name from SELECT ... FROM 0ms
 âœ“ tests/unit/tableUtils.tableNameUtils.test.ts > extractTableName > extracts table name from UPDATE 1ms
 âœ“ tests/unit/tableUtils.tableNameUtils.test.ts > extractTableName > extracts table name from TRUNCATE TABLE 0ms
 âœ“ tests/unit/tableUtils.tableNameUtils.test.ts > extractTableName > extracts table name from ALTER TABLE 1ms
 âœ“ tests/unit/tableUtils.tableNameUtils.test.ts > extractTableName > extracts table name from DROP TABLE 1ms
 âœ“ tests/unit/tableUtils.tableNameUtils.test.ts > extractTableName > throws on malformed SQL 1ms
 âœ“ tests/unit/tableUtils.tableNameUtils.test.ts > normalizeTableName > preserves quoted names as-is 0ms
 âœ“ tests/unit/tableUtils.tableNameUtils.test.ts > normalizeTableName > lowercases unquoted names 0ms
 âœ“ tests/unit/tableUtils.tableNameUtils.test.ts > getTableKey > finds exact match for quoted 0ms
 âœ“ tests/unit/tableUtils.tableNameUtils.test.ts > getTableKey > finds normalized match for unquoted 0ms
 âœ“ tests/unit/tableUtils.tableNameUtils.test.ts > getTableKey > returns undefined if not found 0ms
 â†“ tests/stress/random.parallel.test.ts > butter churn ðŸ§ˆ (vigorous parallel stress testing) > stress mockD1Database with parallel randomized queries
stdout | tests/unit/engine.handleInsert.test.ts > handleInsert > inserts a row with bind values
[I][handleInsert] row inserted { tableKey: [32m'nmsd_xhku'[39m, rowCount: [33m3[39m }

stdout | tests/unit/engine.handleInsert.test.ts > handleInsert > auto-creates table if not exists
[I][handleInsert] row inserted { tableKey: [32m'mshm_gjdv'[39m, rowCount: [33m1[39m }

 âœ“ tests/unit/engine.handleInsert.test.ts > handleInsert > inserts a row with bind values 34ms
 âœ“ tests/unit/engine.handleInsert.test.ts > handleInsert > auto-creates table if not exists 6ms
 âœ“ tests/unit/engine.handleInsert.test.ts > handleInsert > throws if column/value count mismatch 4ms
 âœ“ tests/unit/engine.handleInsert.test.ts > handleInsert > throws if missing bind argument 185ms
stdout | tests/unit/engine.handleInsert.test.ts > handleInsert > inserts with quoted identifiers
[I][handleInsert] row inserted { tableKey: [32m'tyaw_pqhj'[39m, rowCount: [33m3[39m }

stdout | tests/unit/engine.handleInsert.test.ts > handleInsert > inserts object/array values as JSON
[I][handleInsert] row inserted { tableKey: [32m'izer_tafw'[39m, rowCount: [33m3[39m }
[I][handleInsert] row inserted { tableKey: [32m'izer_tafw'[39m, rowCount: [33m4[39m }

 âœ“ tests/unit/engine.handleInsert.test.ts > handleInsert > throws on non-bind value in VALUES 1ms
 âœ“ tests/unit/engine.handleInsert.test.ts > handleInsert > throws on duplicate column names 4ms
 âœ“ tests/unit/engine.handleInsert.test.ts > handleInsert > inserts with quoted identifiers 2ms
 âœ“ tests/unit/engine.handleInsert.test.ts > handleInsert > inserts object/array values as JSON 8ms
 âœ“ tests/unit/engine.handleInsert.test.ts > handleInsert > skips insert if all values are undefined 1ms
 âœ“ tests/unit/engine.handleInsert.test.ts > handleInsert > throws on unsupported data types 8ms
stdout | tests/unit/engine.preparedStatement.test.ts > createPreparedStatement > run(), all(), first() and raw() call the correct handler and return results
[I][handleSelect] select * complete { rowCount: [33m2[39m }

stdout | tests/unit/engine.preparedStatement.test.ts > createPreparedStatement > run(), all(), first() and raw() call the correct handler and return results
[I][handleSelect] select * complete { rowCount: [33m1[39m }

stdout | tests/unit/engine.preparedStatement.test.ts > createPreparedStatement > run(), all(), first() and raw() call the correct handler and return results
[I][handleSelect] select * complete { rowCount: [33m2[39m }

stdout | tests/unit/engine.preparedStatement.test.ts > createPreparedStatement > run(), all(), first() and raw() call the correct handler and return results
[I][handleSelect] select * complete { rowCount: [33m2[39m }

 âœ“ tests/unit/engine.preparedStatement.test.ts > createPreparedStatement > throws on multiple SQL statements 4ms
 âœ“ tests/unit/engine.preparedStatement.test.ts > createPreparedStatement > throws on unsupported SQL syntax (LIKE, BETWEEN, JOIN) 2ms
 âœ“ tests/unit/engine.preparedStatement.test.ts > createPreparedStatement > throws on malformed SELECT at prepare-time 1ms
 âœ“ tests/unit/engine.preparedStatement.test.ts > createPreparedStatement > throws on malformed INSERT at prepare-time 1ms
 âœ“ tests/unit/engine.preparedStatement.test.ts > createPreparedStatement > throws on malformed DELETE at prepare-time 0ms
 âœ“ tests/unit/engine.preparedStatement.test.ts > createPreparedStatement > throws on malformed UPDATE at prepare-time 0ms
 âœ“ tests/unit/engine.preparedStatement.test.ts > createPreparedStatement > returns a prepared statement object with D1 methods 1ms
 âœ“ tests/unit/engine.preparedStatement.test.ts > createPreparedStatement > bind() sets bind arguments and is chainable 65ms
 âœ“ tests/unit/engine.preparedStatement.test.ts > createPreparedStatement > run(), all(), first() and raw() call the correct handler and return results 193ms
 âœ“ tests/unit/engine.preparedStatement.test.ts > createPreparedStatement > raw() returns [] if handler throws or returns no results 4ms
 âœ“ tests/unit/engine.sqlValidation.test.ts > validateSQLSyntax > allows valid CREATE TABLE 4ms
 âœ“ tests/unit/engine.sqlValidation.test.ts > validateSQLSyntax > rejects unsupported patterns 2ms
 âœ“ tests/unit/engine.sqlValidation.test.ts > validateSQLSyntax > allows other primary operations 30ms
 âœ“ tests/unit/engine.sqlValidation.test.ts > validateSQLSyntax > rejects everything else 0ms
 âœ“ tests/unit/engine.sqlValidation.test.ts > validateSqlOrThrow > throws on unsupported SQL 102ms
 âœ“ tests/unit/engine.sqlValidation.test.ts > validateSqlOrThrow > throws on malformed SELECT 1ms
 âœ“ tests/unit/engine.sqlValidation.test.ts > validateSqlOrThrow > throws on malformed INSERT 22ms
 âœ“ tests/unit/engine.sqlValidation.test.ts > validateSqlOrThrow > throws on malformed DELETE 1ms
 âœ“ tests/unit/engine.sqlValidation.test.ts > validateSqlOrThrow > throws on malformed UPDATE 1ms
 Ã— tests/unit/engine.sqlValidation.test.ts > validateSqlOrThrow > throws on malformed CREATE 5ms
   â†’ expected [Function] to throw error matching /MALFORMED_CREATE/ but got 'Unsupported SQL syntax: UNSUPPORTED_Sâ€¦'
 âœ“ tests/unit/engine.sqlValidation.test.ts > validateSqlOrThrow > throws on malformed DROP 0ms
 âœ“ tests/unit/engine.sqlValidation.test.ts > validateSqlOrThrow > throws on malformed TRUNCATE 1ms
 âœ“ tests/unit/engine.sqlValidation.test.ts > validateSqlOrThrow > throws on malformed ALTER 5ms
 âœ“ tests/unit/engine.sqlValidation.test.ts > validateSqlOrThrow > does not throw if skipMalformed is true 0ms
 âœ“ tests/unit/engine.whereEvaluator.test.ts > evaluateWhereAst > evaluates simple equality 4ms
 âœ“ tests/unit/engine.whereEvaluator.test.ts > evaluateWhereAst > evaluates quoted column and string value 1ms
 âœ“ tests/unit/engine.whereEvaluator.test.ts > evaluateWhereAst > evaluates bind parameter 1ms
 âœ“ tests/unit/engine.whereEvaluator.test.ts > evaluateWhereAst > evaluates IS NULL/IS NOT NULL 1ms
 âœ“ tests/unit/engine.whereEvaluator.test.ts > evaluateWhereAst > evaluates AND/OR 1ms
 âœ“ tests/unit/engine.whereEvaluator.test.ts > evaluateWhereAst > handles random keys and values (helpers) 216ms
 âœ“ tests/unit/engine.whereEvaluator.test.ts > evaluateWhereAst > handles randomData rows 0ms
 âœ“ tests/unit/engine.whereEvaluator.test.ts > evaluateWhereAst > treats null and undefined as equivalent for D1 0ms
 âœ“ tests/unit/helpers/injectTableRows.schemaEdge.test.ts > injectTableRows (schema inference edge cases) > infers schema from first row only (throws on extra keys in later rows) 359ms
 âœ“ tests/unit/helpers/injectTableRows.schemaEdge.test.ts > injectTableRows (schema inference edge cases) > creates table with empty schema if rows is empty 1ms
 âœ“ tests/unit/helpers/injectTableRows.schemaEdge.test.ts > injectTableRows (schema inference edge cases) > after schema inference, only the normalized key (not the quoted key) is accepted for quoted columns; inserting with the quoted key throws 149ms
stdout | tests/unit/engine.handleCreateTable.test.ts > handleCreateTable > creates a table with columns
[I][handleCreateTable] Created table with columns {
  tableKey: [32m'ncxa_rynd'[39m,
  columns: [ [32m'bbry_dzqc'[39m, [32m'qzqm_ntlm'[39m ],
  VITEST_POOL_ID: [32m'1'[39m,
  VITEST_WORKER_ID: [32m'9'[39m
}

stdout | tests/unit/engine.handleCreateTable.test.ts > handleCreateTable > creates a table with quoted columns
[I][handleCreateTable] Created table with columns {
  tableKey: [32m'ullm_ivdt'[39m,
  columns: [ [32m'soir_xlon'[39m, [32m'rxas_tblm'[39m ],
  VITEST_POOL_ID: [32m'1'[39m,
  VITEST_WORKER_ID: [32m'9'[39m
}

stdout | tests/unit/engine.handleCreateTable.test.ts > handleCreateTable > allows empty parens (no columns) and creates an empty table
[I][handleCreateTable] Created empty table (no columns, colSection empty string) {
  sql: [32m'CREATE TABLE jdsc_jrpa ()'[39m,
  colMatch: [
    [32m'CREATE TABLE jdsc_jrpa ()'[39m,
    [90mundefined[39m,
    [32m'jdsc_jrpa'[39m,
    [32m''[39m,
    index: [33m0[39m,
    input: [32m'CREATE TABLE jdsc_jrpa ()'[39m,
    groups: [90mundefined[39m
  ],
  colSection: [32m''[39m,
  tableKey: [32m'jdsc_jrpa'[39m,
  VITEST_POOL_ID: [32m'1'[39m,
  VITEST_WORKER_ID: [32m'9'[39m
}

 âœ“ tests/unit/engine.handleCreateTable.test.ts > handleCreateTable > creates a table with columns 23ms
 âœ“ tests/unit/engine.handleCreateTable.test.ts > handleCreateTable > creates a table with quoted columns 4ms
 Ã— tests/unit/engine.handleCreateTable.test.ts > handleCreateTable > creates an empty table if no columns 10ms
   â†’ Unsupported SQL syntax
 âœ“ tests/unit/engine.handleCreateTable.test.ts > handleCreateTable > throws on duplicate columns 19ms
 âœ“ tests/unit/engine.handleCreateTable.test.ts > handleCreateTable > allows empty parens (no columns) and creates an empty table 4ms
 âœ“ tests/unit/engine.handleCreateTable.test.ts > handleCreateTable > throws on malformed SQL 100ms
stdout | tests/unit/engine.handleCreateTable.test.ts > handleCreateTable > skips creation if table exists and IF NOT EXISTS is present
[I][handleCreateTable] Created table with columns {
  tableKey: [32m'dqmr_ceko'[39m,
  columns: [ [32m'mimv_teql'[39m ],
  VITEST_POOL_ID: [32m'1'[39m,
  VITEST_WORKER_ID: [32m'9'[39m
}
[I][handleCreateTable] IF NOT EXISTS: table already exists, skipping {
  tableName: [32m'dqmr_ceko'[39m,
  tableKey: [32m'dqmr_ceko'[39m,
  VITEST_POOL_ID: [32m'1'[39m,
  VITEST_WORKER_ID: [32m'9'[39m
}

stdout | tests/unit/engine.handleCreateTable.test.ts > handleCreateTable > throws if table exists and IF NOT EXISTS is not present
[I][handleCreateTable] Created table with columns {
  tableKey: [32m'vzmu_imfv'[39m,
  columns: [ [32m'xjfq_dhrq'[39m ],
  VITEST_POOL_ID: [32m'1'[39m,
  VITEST_WORKER_ID: [32m'9'[39m
}

 âœ“ tests/unit/engine.handleCreateTable.test.ts > handleCreateTable > skips creation if table exists and IF NOT EXISTS is present 4ms
 âœ“ tests/unit/engine.handleCreateTable.test.ts > handleCreateTable > throws if table exists and IF NOT EXISTS is not present 16ms
 âœ“ tests/unit/helpers/injectTableRows.edge.test.ts > injectTableRows (edge and error cases) > injects into a new table and creates schema row 80ms
 âœ“ tests/unit/helpers/injectTableRows.edge.test.ts > injectTableRows (edge and error cases) > injects empty array to clear table 9ms
 âœ“ tests/unit/helpers/injectTableRows.edge.test.ts > injectTableRows (edge and error cases) > throws if injecting row with extra columns 19ms
 âœ“ tests/unit/helpers/injectTableRows.edge.test.ts > injectTableRows (edge and error cases) > fills missing columns with null 204ms
 âœ“ tests/unit/helpers/injectTableRows.edge.test.ts > injectTableRows (edge and error cases) > throws if schema row is empty and non-empty row is injected 1ms
 âœ“ tests/unit/helpers/injectTableRows.edge.test.ts > injectTableRows (edge and error cases) > is case-insensitive for column names 24ms
stdout | tests/unit/engine.handleUpdate.test.ts > handleUpdate > updates rows matching WHERE
[I][handleUpdate] update complete { tableKey: [32m'nsgv_agyy'[39m, changes: [33m1[39m }

 âœ“ tests/unit/engine.handleUpdate.test.ts > handleUpdate > updates rows matching WHERE 116ms
stdout | tests/unit/engine.handleUpdate.test.ts > handleUpdate > updates all rows if no WHERE
[I][handleUpdate] update complete { tableKey: [32m'grdx_idni'[39m, changes: [33m2[39m }

stdout | tests/unit/engine.handleUpdate.test.ts > handleUpdate > updates with quoted identifiers
[I][handleUpdate] update complete { tableKey: [32m'kqdp_rizd'[39m, changes: [33m1[39m }

stdout | tests/unit/engine.handleUpdate.test.ts > handleUpdate > updates with object/array values (stringified)
[I][handleUpdate] update complete { tableKey: [32m'cquf_qlst'[39m, changes: [33m2[39m }
[I][handleUpdate] update complete { tableKey: [32m'cquf_qlst'[39m, changes: [33m2[39m }

 âœ“ tests/unit/engine.handleUpdate.test.ts > handleUpdate > updates all rows if no WHERE 4ms
 âœ“ tests/unit/engine.handleUpdate.test.ts > handleUpdate > throws if column does not exist 5ms
 âœ“ tests/unit/engine.handleUpdate.test.ts > handleUpdate > throws if missing bind argument 6ms
 âœ“ tests/unit/engine.handleUpdate.test.ts > handleUpdate > updates with quoted identifiers 4ms
 âœ“ tests/unit/engine.handleUpdate.test.ts > handleUpdate > updates with object/array values (stringified) 101ms
stdout | tests/unit/engine.handleUpdate.test.ts > handleUpdate > returns correct meta info
[I][handleUpdate] update complete { tableKey: [32m'rhyk_fgvz'[39m, changes: [33m2[39m }

 âœ“ tests/unit/engine.handleUpdate.test.ts > handleUpdate > returns correct meta info 6ms
stdout | tests/unit/engine.handleSelect.test.ts > handleSelect > selects all rows with SELECT *
[I][handleSelect] select * complete { rowCount: [33m2[39m }

stdout | tests/unit/engine.handleSelect.test.ts > handleSelect > selects first row with mode "first"
[I][handleSelect] select * complete { rowCount: [33m1[39m }

stdout | tests/unit/engine.handleSelect.test.ts > handleSelect > selects specific columns
[I][handleSelect] select <columns> complete { rowCount: [33m2[39m }

stdout | tests/unit/engine.handleSelect.test.ts > handleSelect > filters rows with WHERE
[I][handleSelect] select * complete { rowCount: [33m1[39m }

 âœ“ tests/unit/engine.handleSelect.test.ts > handleSelect > selects all rows with SELECT * 30ms
 âœ“ tests/unit/engine.handleSelect.test.ts > handleSelect > selects first row with mode "first" 8ms
 âœ“ tests/unit/engine.handleSelect.test.ts > handleSelect > selects specific columns 11ms
 âœ“ tests/unit/engine.handleSelect.test.ts > handleSelect > filters rows with WHERE 20ms
 âœ“ tests/unit/engine.handleSelect.test.ts > handleSelect > returns COUNT(*) 181ms
 âœ“ tests/unit/engine.handleSelect.test.ts > handleSelect > throws if table does not exist 14ms
 âœ“ tests/unit/engine.handleSelect.test.ts > handleSelect > throws if column does not exist 2ms
 âœ“ tests/unit/engine.handleSelect.test.ts > handleSelect > throws if missing bind argument 2ms
 âœ“ tests/unit/engine.handleSelect.test.ts > handleSelect > throws on malformed SQL 1ms
stdout | tests/unit/engine.handleAlterTableAddColumn.test.ts > handleAlterTableAddColumn > adds a new unquoted column
[I][handleAlterTableAddColumn] ALTER TABLE ADD COLUMN complete {
  tableKey: [32m'hvct_sctm'[39m,
  col: [32m'kcwm_znud'[39m,
  schemaKeys: [ [32m'uxpj_yuyd'[39m, [32m'jqze_jcjo'[39m, [32m'kcwm_znud'[39m ],
  schemaRow: { uxpj_yuyd: [1mnull[22m, jqze_jcjo: [1mnull[22m, kcwm_znud: [1mnull[22m }
}

 âœ“ tests/unit/engine.handleAlterTableAddColumn.test.ts > handleAlterTableAddColumn > adds a new unquoted column 213ms
stdout | tests/unit/engine.handleAlterTableAddColumn.test.ts > handleAlterTableAddColumn > adds a new quoted column
[I][handleAlterTableAddColumn] ALTER TABLE ADD COLUMN complete {
  tableKey: [32m'gbcl_rwlk'[39m,
  col: [32m'yrmd_senl'[39m,
  schemaKeys: [ [32m'oytk_ipxx'[39m, [32m'rtca_jofq'[39m, [32m'yrmd_senl'[39m ],
  schemaRow: { oytk_ipxx: [1mnull[22m, rtca_jofq: [1mnull[22m, yrmd_senl: [1mnull[22m }
}

stdout | tests/unit/engine.handleAlterTableAddColumn.test.ts > handleAlterTableAddColumn > throws on duplicate quoted column
[I][handleAlterTableAddColumn] ALTER TABLE ADD COLUMN complete {
  tableKey: [32m'jgnz_seiz'[39m,
  col: [32m'fxom_jexk'[39m,
  schemaKeys: [ [32m'ukhb_asgx'[39m, [32m'fxom_jexk'[39m ],
  schemaRow: { ukhb_asgx: [1mnull[22m, fxom_jexk: [1mnull[22m }
}

 âœ“ tests/unit/engine.handleAlterTableAddColumn.test.ts > handleAlterTableAddColumn > adds a new quoted column 13ms
 âœ“ tests/unit/engine.handleAlterTableAddColumn.test.ts > handleAlterTableAddColumn > throws on duplicate unquoted column 7ms
 Ã— tests/unit/engine.handleAlterTableAddColumn.test.ts > handleAlterTableAddColumn > throws on duplicate quoted column 4ms
   â†’ expected [Function] to throw an error
 âœ“ tests/unit/engine.handleAlterTableAddColumn.test.ts > handleAlterTableAddColumn > throws if table does not exist 1ms
 âœ“ tests/unit/engine.handleAlterTableAddColumn.test.ts > handleAlterTableAddColumn > throws on unsupported column type 15ms
 âœ“ tests/unit/engine.handleAlterTableAddColumn.test.ts > handleAlterTableAddColumn > throws on malformed SQL 4ms
 â†“ tests/smoke/smoke.registry.test.ts > npm package can be installed and imported from registry (smoke test)
stdout | tests/security/sqlInjection.test.ts > SQL Injection and Malformed SQL > should not allow SQL injection via bind values
[I][handleCreateTable] Created table with columns {
  tableKey: [32m'users'[39m,
  columns: [ [32m'id'[39m, [32m'name'[39m ],
  VITEST_POOL_ID: [32m'2'[39m,
  VITEST_WORKER_ID: [32m'14'[39m
}
[I][handleSelect] select * complete { rowCount: [33m0[39m }

 âœ“ tests/security/sqlInjection.test.ts > SQL Injection and Malformed SQL > should not allow SQL injection via bind values 174ms
stdout | tests/security/sqlInjection.test.ts > SQL Injection and Malformed SQL > should throw on malformed SQL
[I][handleCreateTable] Created empty table (no columns, colSection empty string) {
  sql: [32m'CREATE TABLE empty_table ()'[39m,
  colMatch: [
    [32m'CREATE TABLE empty_table ()'[39m,
    [90mundefined[39m,
    [32m'empty_table'[39m,
    [32m''[39m,
    index: [33m0[39m,
    input: [32m'CREATE TABLE empty_table ()'[39m,
    groups: [90mundefined[39m
  ],
  colSection: [32m''[39m,
  tableKey: [32m'empty_table'[39m,
  VITEST_POOL_ID: [32m'2'[39m,
  VITEST_WORKER_ID: [32m'14'[39m
}

stdout | tests/security/sqlInjection.test.ts > SQL Injection and Malformed SQL > should throw on malformed SQL
[I][handleCreateTable] Created table with columns {
  tableKey: [32m'users'[39m,
  columns: [ [32m'id'[39m, [32m'name'[39m ],
  VITEST_POOL_ID: [32m'2'[39m,
  VITEST_WORKER_ID: [32m'14'[39m
}

 âœ“ tests/security/sqlInjection.test.ts > SQL Injection and Malformed SQL > should throw on multiple statements in one string 1ms
 âœ“ tests/security/sqlInjection.test.ts > SQL Injection and Malformed SQL > should throw on malformed SQL 113ms
 â†“ tests/stress/random.valid.test.ts > butter churn ðŸ§ˆ (valid stress testing) > stress mockD1Database with valid randomized queries
 âœ“ tests/unit/tableUtils.schemaUtils.test.ts > schemaUtils > validates row with exact and case-insensitive columns 56ms
 âœ“ tests/unit/tableUtils.schemaUtils.test.ts > schemaUtils > throws on extra columns 198ms
 âœ“ tests/unit/tableUtils.schemaUtils.test.ts > schemaUtils > normalizes row to schema (fills missing with null) 14ms
 âœ“ tests/unit/tableUtils.schemaUtils.test.ts > schemaUtils > normalizes with quoted/unquoted distinction 1ms
 âœ“ tests/unit/tableUtils.schemaUtils.test.ts > schemaUtils > handles all missing columns 0ms
 âœ“ tests/unit/helpers/mockInject.gates.test.ts > mockInject (env gates) > logs a warning if not in test env 38ms
 âœ“ tests/unit/helpers/mockInject.gates.test.ts > mockInject (env gates) > does not log a warning in test env 94ms
 âœ“ tests/unit/helpers/mockInject.gates.test.ts > mockInject (env gates) > logs debug output if DEBUG is set 20ms
 âœ“ tests/unit/helpers/summarizeValue.test.ts > summarizeValue > summarizes long strings 2ms
 âœ“ tests/unit/helpers/summarizeValue.test.ts > summarizeValue > returns short strings unchanged 0ms
 âœ“ tests/unit/helpers/summarizeValue.test.ts > summarizeValue > summarizes arrays 0ms
 âœ“ tests/unit/helpers/summarizeValue.test.ts > summarizeValue > summarizes objects recursively 82ms
 âœ“ tests/unit/helpers/summarizeValue.test.ts > summarizeValue > summarizes non-plain objects as [object] 1ms
 âœ“ tests/unit/helpers/summarizeValue.test.ts > summarizeValue > returns primitives unchanged 0ms
 âœ“ tests/unit/helpers/summarizeValue.test.ts > summarizeRow > summarizes all values in a row 1ms
 âœ“ tests/unit/helpers/summarizeValue.test.ts > summarizeRow > returns null/undefined as is 0ms
 âœ“ tests/unit/engine.parseCreateTable.test.ts > parseCreateTable > parses valid CREATE TABLE with single column 2ms
 âœ“ tests/unit/engine.parseCreateTable.test.ts > parseCreateTable > parses valid CREATE TABLE with multiple columns 1ms
 âœ“ tests/unit/engine.parseCreateTable.test.ts > parseCreateTable > trims whitespace in columns 0ms
 âœ“ tests/unit/engine.parseCreateTable.test.ts > parseCreateTable > throws on missing columns 1ms
 âœ“ tests/unit/engine.parseCreateTable.test.ts > parseCreateTable > throws on malformed CREATE TABLE 1ms
 âœ“ tests/unit/engine.parseCreateTable.test.ts > parseCreateTable > throws on empty or invalid column definitions 1ms
stdout | tests/unit/engine.handleDelete.test.ts > handleDelete > deletes all rows if no WHERE
[I][handleDelete] deleted rows { changes: [33m2[39m, size_after: [33m0[39m }

stdout | tests/unit/engine.handleDelete.test.ts > handleDelete > deletes only matching rows with WHERE
[I][handleDelete] deleted rows { changes: [33m1[39m, size_after: [33m1[39m }

 âœ“ tests/unit/engine.handleDelete.test.ts > handleDelete > deletes all rows if no WHERE 16ms
 âœ“ tests/unit/engine.handleDelete.test.ts > handleDelete > deletes only matching rows with WHERE 4ms
 âœ“ tests/unit/engine.handleDelete.test.ts > handleDelete > throws if table does not exist 75ms
 âœ“ tests/unit/engine.handleDelete.test.ts > handleDelete > throws if missing bind argument 2ms
 âœ“ tests/unit/engine.handleDelete.test.ts > handleDelete > throws on malformed SQL 2ms
 âœ“ tests/unit/tableUtils.tableLookup.test.ts > tableLookup > finds table key case-insensitively 2ms
 âœ“ tests/unit/tableUtils.tableLookup.test.ts > tableLookup > finds column key with quoted/unquoted logic 16ms
 âœ“ tests/unit/helpers/mockDump.gates.test.ts > mockDump (env gates) > logs a warning if not in test env 34ms
 âœ“ tests/unit/helpers/mockDump.gates.test.ts > mockDump (env gates) > does not log a warning in test env 1ms
 âœ“ tests/unit/helpers/mockDump.gates.test.ts > mockDump (env gates) > logs debug output if DEBUG is set 1ms
stdout | tests/unit/engine.handleTruncateTable.test.ts > handleTruncateTable > removes all rows and columns from the table
[I][handleTruncateTable] Table truncated { tableKey: [32m'gbjd_dufp'[39m }

 âœ“ tests/unit/engine.handleTruncateTable.test.ts > handleTruncateTable > removes all rows and columns from the table 27ms
 âœ“ tests/unit/engine.handleTruncateTable.test.ts > handleTruncateTable > throws if table does not exist 95ms
 âœ“ tests/unit/engine.handleTruncateTable.test.ts > handleTruncateTable > throws on malformed SQL 1ms
 â†“ tests/smoke/smoke.test.ts > npm package can be installed and imported (smoke test)
 âœ“ tests/unit/engine.errors.test.ts > D1_ERRORS > contains expected error codes and messages 35ms
 âœ“ tests/unit/engine.errors.test.ts > d1Error > returns an Error with the correct message for a known code 1ms
 âœ“ tests/unit/engine.errors.test.ts > d1Error > appends details to the error message if provided 1ms
 âœ“ tests/unit/engine.errors.test.ts > d1Error > throws if an unknown code is used (TypeScript type safety) 3ms
 âœ“ tests/unit/helpers/mockInject.basic.test.ts > mockInject > injects a table into the db 173ms
 âœ“ tests/unit/helpers/mockInject.basic.test.ts > mockInject > throws if table name is missing 3ms
 âœ“ tests/unit/helpers/mockInject.basic.test.ts > mockInject > throws if rows is not an array 3ms
 âœ“ tests/unit/engine.resultMeta.test.ts > makeMetaFields > returns all default meta fields when called with no arguments 2ms
 âœ“ tests/unit/engine.resultMeta.test.ts > makeMetaFields > overrides individual fields when provided 1ms
 âœ“ tests/unit/engine.resultMeta.test.ts > makeMetaFields > merges partial overrides with defaults 1ms
 âœ“ tests/unit/engine.resultMeta.test.ts > makeMetaFields > does not mutate the input argument 0ms
 âœ“ tests/unit/engine.resultUtils.test.ts > makeD1Result > returns a D1 result object with results and default meta 2ms
 âœ“ tests/unit/engine.resultUtils.test.ts > makeD1Result > merges provided meta fields 0ms
 âœ“ tests/unit/engine.resultUtils.test.ts > makeD1Result > handles empty results and meta 0ms
 âœ“ tests/unit/engine.resultUtils.test.ts > makeD1Result > does not mutate input arguments 0ms
 âœ“ tests/unit/helpers/injectTableRows.basic.test.ts > injectTableRows > injects rows into an existing table 101ms
 âœ“ tests/unit/helpers/injectTableRows.basic.test.ts > injectTableRows > creates table if not exists 8ms
stdout | tests/unit/engine.handleDropTable.test.ts > handleDropTable > removes the table from the db
[I][handleDropTable] Table dropped { tableKey: [32m'iyna_cxzt'[39m }

 âœ“ tests/unit/engine.handleDropTable.test.ts > handleDropTable > removes the table from the db 12ms
 âœ“ tests/unit/engine.handleDropTable.test.ts > handleDropTable > throws if table does not exist 121ms
 âœ“ tests/unit/engine.handleDropTable.test.ts > handleDropTable > throws on malformed SQL 78ms
 âœ“ tests/unit/engine.bindUtils.test.ts > validateBindArgs > does not throw if all required parameters are present 2ms
 âœ“ tests/unit/engine.bindUtils.test.ts > validateBindArgs > throws if a required parameter is missing 1ms
 âœ“ tests/unit/engine.bindUtils.test.ts > validateBindArgs > throws with the missing parameter name in the error message 2ms
 âœ“ tests/unit/engine.bindUtils.test.ts > validateBindArgs > does not mutate the input arguments 2ms
stdout | tests/security/sqlInjection.malformed.test.ts > SQL Injection and Malformed SQL > should throw on malformed SQL
[I][handleCreateTable] Created empty table (no columns, colSection empty string) {
  sql: [32m'CREATE TABLE empty_table ()'[39m,
  colMatch: [
    [32m'CREATE TABLE empty_table ()'[39m,
    [90mundefined[39m,
    [32m'empty_table'[39m,
    [32m''[39m,
    index: [33m0[39m,
    input: [32m'CREATE TABLE empty_table ()'[39m,
    groups: [90mundefined[39m
  ],
  colSection: [32m''[39m,
  tableKey: [32m'empty_table'[39m,
  VITEST_POOL_ID: [32m'1'[39m,
  VITEST_WORKER_ID: [32m'32'[39m
}

stdout | tests/security/sqlInjection.malformed.test.ts > SQL Injection and Malformed SQL > should throw on malformed SQL
[I][handleCreateTable] Created table with columns {
  tableKey: [32m'users'[39m,
  columns: [ [32m'id'[39m, [32m'name'[39m ],
  VITEST_POOL_ID: [32m'1'[39m,
  VITEST_WORKER_ID: [32m'32'[39m
}

 âœ“ tests/security/sqlInjection.malformed.test.ts > SQL Injection and Malformed SQL > should throw on malformed SQL 229ms
 âœ“ tests/unit/helpers/mockDump.test.ts > mockDump > dumps a simple db with one table 2ms
 âœ“ tests/unit/helpers/mockDump.test.ts > mockDump > handles empty db 2ms
 âœ“ tests/unit/helpers/mockDump.test.ts > mockDump > handles table with no rows 1ms
 âœ“ tests/unit/helpers/injectTableRows.overwriteColumns.test.ts > injectTableRows > overwrites columns if table exists and columns differ 138ms
 âœ“ tests/unit/helpers/findTableKey.test.ts > findTableKey (helpers) > finds exact match 2ms
 âœ“ tests/unit/helpers/findTableKey.test.ts > findTableKey (helpers) > finds case-insensitive match 1ms
 âœ“ tests/unit/helpers/findTableKey.test.ts > findTableKey (helpers) > returns undefined if not found 0ms
 âœ“ tests/unit/helpers/findTableKey.test.ts > findTableKey (helpers) > handles quoted table names 0ms
 âœ“ tests/unit/helpers/mockBatch.gates.test.ts > mockBatch > always warns and returns empty array 6ms
 âœ“ tests/unit/helpers/injectTableRows.errors.test.ts > injectTableRows (error cases) > throws if table name is missing 10ms
 âœ“ tests/unit/helpers/injectTableRows.errors.test.ts > injectTableRows (error cases) > throws if rows is not an array 4ms
 âœ“ tests/unit/helpers/injectTableRows.errors.test.ts > injectTableRows (error cases) > throws if columns do not match for existing table 13ms
 âœ“ tests/unit/invalid.malformedSql.test.ts > invalid testing - malformed SQL > throws on malformed SQL 43ms
 âœ“ tests/unit/engine.handleAlterTableDropColumn.test.ts > handleAlterTableDropColumn > always throws UNSUPPORTED_SQL error 125ms
 âœ“ tests/unit/engine.handleAlterTableDropColumn.test.ts > handleAlterTableDropColumn > validates SQL if provided 4ms
 âœ“ tests/unit/engine.handleAlterTableDropColumn.test.ts > handleAlterTableDropColumn > works with no arguments (still throws) 80ms
 âœ“ tests/unit/invalid.unsupportedSql.test.ts > invalid testing - unsupported SQL > does not throw on unsupported SQL (DROP, TRUNCATE, ALTER) at prepare-time 142ms
stdout | tests/security/sqlInjection.bindvalues.test.ts > SQL Injection and Malformed SQL > should not allow SQL injection via bind values
[I][handleCreateTable] Created table with columns {
  tableKey: [32m'users'[39m,
  columns: [ [32m'id'[39m, [32m'name'[39m ],
  VITEST_POOL_ID: [32m'1'[39m,
  VITEST_WORKER_ID: [32m'42'[39m
}
[I][handleSelect] select * complete { rowCount: [33m0[39m }

 âœ“ tests/security/sqlInjection.bindvalues.test.ts > SQL Injection and Malformed SQL > should not allow SQL injection via bind values 149ms
 â†“ tests/stress/random.malformedSql.test.ts > butter churn ðŸ§ˆ (invalid stress testing) - malformed SQL > throws on malformed SQL
 âœ“ tests/unit/malformedSql.test.ts > invalid testing - malformed SQL > throws on malformed SQL 11ms
 âœ“ tests/unit/engine.handleBatch.test.ts > handleBatch > always throws UNSUPPORTED_SQL error 187ms
 âœ“ tests/unit/engine.handleBatch.test.ts > handleTransaction > always throws UNSUPPORTED_SQL error 14ms
 Ã— tests/unit/missingBindArgument.test.ts > invalid stress testing - missing bind argument > throws on missing bind argument 79ms
   â†’ Unsupported SQL syntax
 Ã— tests/unit/invalid.missingBindArgument.test.ts > invalid testing - missing bind argument > throws on missing bind argument 12ms
   â†’ Unsupported SQL syntax
 âœ“ tests/security/sqlInjection.multistatement.test.ts > SQL Injection and Malformed SQL > should throw on multiple statements in one string 10ms

 Test Files  5 failed | 38 passed | 5 skipped (48)
      Tests  5 failed | 197 passed | 5 skipped (207)
   Start at  14:52:21
   Duration  39.29s (transform 1.31s, setup 0ms, collect 10.47s, tests 6.11s, environment 15ms, prepare 20.73s)

